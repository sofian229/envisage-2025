{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\caretaker-dashboard\\\\front-end\\\\src\\\\components\\\\ActivityLog.jsx\",\n  _s = $RefreshSig$();\n// components/ActivityLog.jsx\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActivityLog = ({\n  activities = [],\n  setActivities,\n  readOnly,\n  patientId,\n  onActivityAdded\n}) => {\n  _s();\n  const [activity, setActivity] = useState({\n    type: '',\n    duration: '',\n    notes: ''\n  });\n  const handleChange = e => {\n    setActivity({\n      ...activity,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAdd = async e => {\n    e.preventDefault();\n    if (!activity.type || !activity.duration) return;\n    if (patientId && onActivityAdded) {\n      // If it's used within PatientCard for live updates\n      try {\n        const response = await fetch(`http://localhost:3000/api/patients/${patientId}/activities`, {\n          // Assuming an activities route\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            ...activity,\n            activityDate: new Date().toISOString()\n          }) // Add activityDate\n        });\n        if (!response.ok) throw new Error('Failed to add activity to backend');\n        const newActivity = await response.json();\n        onActivityAdded(newActivity); // Notify parent (PatientCard) to update state\n        setActivity({\n          type: '',\n          duration: '',\n          notes: ''\n        });\n      } catch (error) {\n        console.error('Error adding activity to patient:', error);\n      }\n    } else if (typeof setActivities === 'function') {\n      // If it's used within Dashboard form for temporary state\n      setActivities([...(Array.isArray(activities) ? activities : []), {\n        ...activity,\n        activityDate: new Date().toISOString(),\n        completed: false\n      }]);\n      setActivity({\n        type: '',\n        duration: '',\n        notes: ''\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\uD83D\\uDCDD Activities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \" \", !readOnly && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAdd,\n      style: {\n        display: 'flex',\n        gap: '0.5rem',\n        marginBottom: '0.5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"type\",\n        placeholder: \"Type\",\n        value: activity.type,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"duration\",\n        placeholder: \"Duration (e.g., 30 min)\",\n        value: activity.duration,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"notes\",\n        placeholder: \"Notes\",\n        value: activity.notes,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), !activities || activities.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: '#718096'\n      },\n      children: \"No activities recorded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: activities.map((a, idx) =>\n      /*#__PURE__*/\n      // Use a unique key, like a._id if coming from backend, or a combination\n      _jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: a.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), \" (\", a.duration, \") \", a.notes && `- ${a.notes}`, a.activityDate &&\n        /*#__PURE__*/\n        // Display date for activities\n        _jsxDEV(\"span\", {\n          className: \"text-sm text-gray-400 ml-2\",\n          children: [\"(\", new Date(a.activityDate).toLocaleDateString(), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, a._id || idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ActivityLog, \"Arz2XIeAv6UiwYGZYoYqIdu+vPE=\");\n_c = ActivityLog;\nexport default ActivityLog;\nvar _c;\n$RefreshReg$(_c, \"ActivityLog\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ActivityLog","activities","setActivities","readOnly","patientId","onActivityAdded","_s","activity","setActivity","type","duration","notes","handleChange","e","target","name","value","handleAdd","preventDefault","response","fetch","method","headers","body","JSON","stringify","activityDate","Date","toISOString","ok","Error","newActivity","json","error","console","Array","isArray","completed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","style","display","gap","marginBottom","placeholder","onChange","required","length","color","map","a","idx","toLocaleDateString","_id","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/caretaker-dashboard/front-end/src/components/ActivityLog.jsx"],"sourcesContent":["// components/ActivityLog.jsx\r\nimport React, { useState } from 'react';\r\n\r\nconst ActivityLog = ({ activities = [], setActivities, readOnly, patientId, onActivityAdded }) => {\r\n  const [activity, setActivity] = useState({ type: '', duration: '', notes: '' });\r\n\r\n  const handleChange = (e) => {\r\n    setActivity({ ...activity, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleAdd = async (e) => {\r\n    e.preventDefault();\r\n    if (!activity.type || !activity.duration) return;\r\n\r\n    if (patientId && onActivityAdded) { // If it's used within PatientCard for live updates\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/api/patients/${patientId}/activities`, { // Assuming an activities route\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ ...activity, activityDate: new Date().toISOString() }), // Add activityDate\r\n        });\r\n\r\n        if (!response.ok) throw new Error('Failed to add activity to backend');\r\n        const newActivity = await response.json();\r\n        onActivityAdded(newActivity); // Notify parent (PatientCard) to update state\r\n        setActivity({ type: '', duration: '', notes: '' });\r\n      } catch (error) {\r\n        console.error('Error adding activity to patient:', error);\r\n      }\r\n    } else if (typeof setActivities === 'function') { // If it's used within Dashboard form for temporary state\r\n      setActivities([...(Array.isArray(activities) ? activities : []), { ...activity, activityDate: new Date().toISOString(), completed: false }]);\r\n      setActivity({ type: '', duration: '', notes: '' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"section\">\r\n      <h4>üìù Activities</h4> {/* Changed title for clarity */}\r\n      {!readOnly && (\r\n        <form onSubmit={handleAdd} style={{ display: 'flex', gap: '0.5rem', marginBottom: '0.5rem' }}>\r\n          {/* Consider using a <select> for activity type from Activity.getActivityTypes() */}\r\n          <input\r\n            name=\"type\"\r\n            placeholder=\"Type\"\r\n            value={activity.type}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <input\r\n            name=\"duration\"\r\n            placeholder=\"Duration (e.g., 30 min)\"\r\n            value={activity.duration}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n          <input\r\n            name=\"notes\"\r\n            placeholder=\"Notes\"\r\n            value={activity.notes}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\">Add Activity</button>\r\n        </form>\r\n      )}\r\n      {(!activities || activities.length === 0) ? (\r\n        <p style={{ color: '#718096' }}>No activities recorded</p>\r\n      ) : (\r\n        <ul>\r\n          {activities.map((a, idx) => (\r\n            // Use a unique key, like a._id if coming from backend, or a combination\r\n            <li key={a._id || idx}>\r\n              <b>{a.type}</b> ({a.duration}) {a.notes && `- ${a.notes}`}\r\n              {a.activityDate && ( // Display date for activities\r\n                <span className=\"text-sm text-gray-400 ml-2\">\r\n                  ({new Date(a.activityDate).toLocaleDateString()})\r\n                </span>\r\n              )}\r\n              {/* Optional: Checkbox for completion if activity can be marked as completed */}\r\n              {/* {!readOnly && (\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={a.completed}\r\n                  onChange={() => { /* handle toggle logic * / }}\r\n                  className=\"ml-2\"\r\n                />\r\n              )} */}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityLog;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}