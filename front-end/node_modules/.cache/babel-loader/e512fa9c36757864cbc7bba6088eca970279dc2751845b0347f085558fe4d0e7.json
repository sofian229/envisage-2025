{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\caretaker-dashboard\\\\front-end\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// components/Dashboard.jsx\nimport React, { useState } from 'react';\nimport ActivityLog from './ActivityLog'; // This is for display and adding to form\nimport MedicationTracker from './MedicationTracker'; // This is for display and adding to form\nimport PatientCard from './PatientCard'; // To display actual patient cards from backend\nimport '../App.css'; // Assuming you have some CSS here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialForm = {\n  _id: null,\n  // MongoDB _id for editing existing patients\n  name: '',\n  age: '',\n  dateOfBirth: '',\n  // Align with backend schema\n  condition: '',\n  emergencyContact: '',\n  medications: [],\n  // Will store temporary medications for the form\n  activities: [] // Will store temporary activities for the form\n};\nconst Dashboard = () => {\n  _s();\n  const [patients, setPatients] = useState([]); // This will store patients fetched from the backend\n  const [form, setForm] = useState(initialForm);\n  const [showForm, setShowForm] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n\n  // --- Fetch Patients on Component Mount ---\n  // (You'll need a way to fetch all patients from your backend if Dashboard shows a list)\n  // Example:\n  // useEffect(() => {\n  //   const fetchAllPatients = async () => {\n  //     try {\n  //       const response = await fetch('http://localhost:3000/api/patients'); // Your route to get all patients\n  //       if (!response.ok) throw new Error('Failed to fetch patients');\n  //       const data = await response.json();\n  //       setPatients(data);\n  //     } catch (error) {\n  //       console.error('Error fetching all patients:', error);\n  //     }\n  //   };\n  //   fetchAllPatients();\n  // }, []); // Empty dependency array means run once on mount\n\n  const handleChange = e => {\n    setForm({\n      ...form,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAddClick = () => {\n    setForm(initialForm); // Reset form for new patient\n    setIsEditing(false);\n    setShowForm(true);\n  };\n\n  // This handleEdit will likely fetch the patient data from the backend\n  // to populate the form correctly, especially for medications and activities.\n  const handleEdit = async patientId => {\n    try {\n      const response = await fetch(`http://localhost:3000/api/patients/${patientId}`);\n      if (!response.ok) throw new Error('Failed to fetch patient for editing');\n      const patientToEdit = await response.json();\n      setForm({\n        ...patientToEdit,\n        // Ensure properties like dateOfBirth are formatted correctly for input type=\"date\"\n        dateOfBirth: patientToEdit.dateOfBirth ? new Date(patientToEdit.dateOfBirth).toISOString().split('T')[0] : '',\n        medications: Array.isArray(patientToEdit.medications) ? patientToEdit.medications : [],\n        activities: Array.isArray(patientToEdit.activities) ? patientToEdit.activities : []\n      });\n      setIsEditing(true);\n      setShowForm(true);\n    } catch (error) {\n      console.error('Error editing patient:', error);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const patientData = {\n      ...form,\n      // Ensure dateOfBirth is sent as a Date object or ISO string if needed by backend\n      dateOfBirth: form.dateOfBirth ? new Date(form.dateOfBirth) : null\n    };\n    try {\n      let response;\n      if (isEditing) {\n        response = await fetch(`http://localhost:3000/api/patients/${form._id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(patientData)\n        });\n      } else {\n        response = await fetch('http://localhost:3000/api/patients', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(patientData)\n        });\n      }\n      if (!response.ok) throw new Error('Failed to save patient');\n      const savedPatient = await response.json();\n      // After saving, re-fetch all patients to ensure the list is up-to-date\n      // Or if you only edit/add one, you can update state optimistically\n      // For simplicity here, let's just re-fetch all (less prone to state sync issues)\n      // If you are not fetching all patients in Dashboard, this won't apply directly\n      // setPatients(prevPatients => {\n      //   if (isEditing) {\n      //     return prevPatients.map(p => p._id === savedPatient._id ? savedPatient : p);\n      //   } else {\n      //     return [...prevPatients, savedPatient];\n      //   }\n      // });\n\n      // IMPORTANT: If Dashboard's `patients` state is only illustrative and\n      // actual patient data is handled by `PatientCard` via `patientId` prop,\n      // then you might not need to update `patients` here directly.\n      // However, if Dashboard *lists* patients, you'd update that list.\n\n      setShowForm(false);\n      setForm(initialForm);\n      setIsEditing(false);\n      // After successful save, refresh the patient list (if Dashboard manages it)\n      // Or redirect to a patient's detail page, etc.\n      // For now, let's assume PatientCard will handle its own fetching.\n    } catch (error) {\n      console.error('Error saving patient:', error);\n      // Optionally show error message to user\n    }\n  };\n  const handleCancel = () => {\n    setShowForm(false);\n    setForm(initialForm);\n    setIsEditing(false);\n  };\n\n  // Callbacks for MedicationTracker and ActivityLog to update the form's temporary state\n  const updateActivitiesInForm = newActivities => {\n    setForm(prevForm => ({\n      ...prevForm,\n      activities: newActivities\n    }));\n  };\n  const updateMedicationsInForm = newMedications => {\n    setForm(prevForm => ({\n      ...prevForm,\n      medications: newMedications\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-patient-btn\",\n      onClick: handleAddClick,\n      children: \"+ Add New Patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"patient-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: isEditing ? 'Edit Patient' : 'Add New Patient'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: form.name,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Age:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"age\",\n          placeholder: \"Age\",\n          value: form.age,\n          onChange: handleChange,\n          required: true,\n          min: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date of Birth:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"dateOfBirth\",\n          value: form.dateOfBirth,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Condition:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"condition\",\n          placeholder: \"Condition\",\n          value: form.condition,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Emergency Contact:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"emergencyContact\",\n          placeholder: \"Emergency Contact\",\n          value: form.emergencyContact,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '1rem 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ActivityLog, {\n          activities: Array.isArray(form.activities) ? form.activities : [],\n          setActivities: updateActivitiesInForm // Use the specific updater for form activities\n          ,\n          readOnly: false // Allow adding activities to the form's temporary state\n          // Do NOT pass patientId or onActivityAdded here, as this is for form temporary state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MedicationTracker, {\n          medications: Array.isArray(form.medications) ? form.medications : [],\n          setMedications: updateMedicationsInForm // Use the specific updater for form medications\n          ,\n          readOnly: false // Allow adding medications to the form's temporary state\n          // Do NOT pass patientId or onMedicationAdded here, as this is for form temporary state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: isEditing ? 'Save Changes' : 'Add Patient'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleCancel,\n          className: \"cancel-btn\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patients-grid\",\n      children: [{\n        _id: '666e2c34d3d21a2c98a7b0a7',\n        name: 'John Doe'\n      },\n      // Example ID from MongoDB\n      {\n        _id: '666e2c34d3d21a2c98a7b0a8',\n        name: 'Jane Smith'\n      }].map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patient-card-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(PatientCard, {\n          patientId: p._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(p._id),\n          children: \"Edit Patient Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 14\n        }, this)]\n      }, p._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"1KzKktRNwed9+ta8TxasEVqpOa4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","ActivityLog","MedicationTracker","PatientCard","jsxDEV","_jsxDEV","initialForm","_id","name","age","dateOfBirth","condition","emergencyContact","medications","activities","Dashboard","_s","patients","setPatients","form","setForm","showForm","setShowForm","isEditing","setIsEditing","handleChange","e","target","value","handleAddClick","handleEdit","patientId","response","fetch","ok","Error","patientToEdit","json","Date","toISOString","split","Array","isArray","error","console","handleSubmit","preventDefault","patientData","method","headers","body","JSON","stringify","savedPatient","handleCancel","updateActivitiesInForm","newActivities","prevForm","updateMedicationsInForm","newMedications","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","min","style","margin","setActivities","readOnly","setMedications","map","p","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/caretaker-dashboard/front-end/src/components/Dashboard.jsx"],"sourcesContent":["// components/Dashboard.jsx\r\nimport React, { useState } from 'react';\r\nimport ActivityLog from './ActivityLog'; // This is for display and adding to form\r\nimport MedicationTracker from './MedicationTracker'; // This is for display and adding to form\r\nimport PatientCard from './PatientCard'; // To display actual patient cards from backend\r\nimport '../App.css'; // Assuming you have some CSS here\r\n\r\nconst initialForm = {\r\n  _id: null, // MongoDB _id for editing existing patients\r\n  name: '',\r\n  age: '',\r\n  dateOfBirth: '', // Align with backend schema\r\n  condition: '',\r\n  emergencyContact: '',\r\n  medications: [], // Will store temporary medications for the form\r\n  activities: []   // Will store temporary activities for the form\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [patients, setPatients] = useState([]); // This will store patients fetched from the backend\r\n  const [form, setForm] = useState(initialForm);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  // --- Fetch Patients on Component Mount ---\r\n  // (You'll need a way to fetch all patients from your backend if Dashboard shows a list)\r\n  // Example:\r\n  // useEffect(() => {\r\n  //   const fetchAllPatients = async () => {\r\n  //     try {\r\n  //       const response = await fetch('http://localhost:3000/api/patients'); // Your route to get all patients\r\n  //       if (!response.ok) throw new Error('Failed to fetch patients');\r\n  //       const data = await response.json();\r\n  //       setPatients(data);\r\n  //     } catch (error) {\r\n  //       console.error('Error fetching all patients:', error);\r\n  //     }\r\n  //   };\r\n  //   fetchAllPatients();\r\n  // }, []); // Empty dependency array means run once on mount\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleAddClick = () => {\r\n    setForm(initialForm); // Reset form for new patient\r\n    setIsEditing(false);\r\n    setShowForm(true);\r\n  };\r\n\r\n  // This handleEdit will likely fetch the patient data from the backend\r\n  // to populate the form correctly, especially for medications and activities.\r\n  const handleEdit = async (patientId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/patients/${patientId}`);\r\n      if (!response.ok) throw new Error('Failed to fetch patient for editing');\r\n      const patientToEdit = await response.json();\r\n      setForm({\r\n        ...patientToEdit,\r\n        // Ensure properties like dateOfBirth are formatted correctly for input type=\"date\"\r\n        dateOfBirth: patientToEdit.dateOfBirth ? new Date(patientToEdit.dateOfBirth).toISOString().split('T')[0] : '',\r\n        medications: Array.isArray(patientToEdit.medications) ? patientToEdit.medications : [],\r\n        activities: Array.isArray(patientToEdit.activities) ? patientToEdit.activities : []\r\n      });\r\n      setIsEditing(true);\r\n      setShowForm(true);\r\n    } catch (error) {\r\n      console.error('Error editing patient:', error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const patientData = {\r\n      ...form,\r\n      // Ensure dateOfBirth is sent as a Date object or ISO string if needed by backend\r\n      dateOfBirth: form.dateOfBirth ? new Date(form.dateOfBirth) : null,\r\n    };\r\n\r\n    try {\r\n      let response;\r\n      if (isEditing) {\r\n        response = await fetch(`http://localhost:3000/api/patients/${form._id}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(patientData),\r\n        });\r\n      } else {\r\n        response = await fetch('http://localhost:3000/api/patients', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(patientData),\r\n        });\r\n      }\r\n\r\n      if (!response.ok) throw new Error('Failed to save patient');\r\n\r\n      const savedPatient = await response.json();\r\n      // After saving, re-fetch all patients to ensure the list is up-to-date\r\n      // Or if you only edit/add one, you can update state optimistically\r\n      // For simplicity here, let's just re-fetch all (less prone to state sync issues)\r\n      // If you are not fetching all patients in Dashboard, this won't apply directly\r\n      // setPatients(prevPatients => {\r\n      //   if (isEditing) {\r\n      //     return prevPatients.map(p => p._id === savedPatient._id ? savedPatient : p);\r\n      //   } else {\r\n      //     return [...prevPatients, savedPatient];\r\n      //   }\r\n      // });\r\n\r\n      // IMPORTANT: If Dashboard's `patients` state is only illustrative and\r\n      // actual patient data is handled by `PatientCard` via `patientId` prop,\r\n      // then you might not need to update `patients` here directly.\r\n      // However, if Dashboard *lists* patients, you'd update that list.\r\n\r\n      setShowForm(false);\r\n      setForm(initialForm);\r\n      setIsEditing(false);\r\n      // After successful save, refresh the patient list (if Dashboard manages it)\r\n      // Or redirect to a patient's detail page, etc.\r\n      // For now, let's assume PatientCard will handle its own fetching.\r\n\r\n    } catch (error) {\r\n      console.error('Error saving patient:', error);\r\n      // Optionally show error message to user\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowForm(false);\r\n    setForm(initialForm);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  // Callbacks for MedicationTracker and ActivityLog to update the form's temporary state\r\n  const updateActivitiesInForm = (newActivities) => {\r\n    setForm(prevForm => ({\r\n      ...prevForm,\r\n      activities: newActivities\r\n    }));\r\n  };\r\n\r\n  const updateMedicationsInForm = (newMedications) => {\r\n    setForm(prevForm => ({\r\n      ...prevForm,\r\n      medications: newMedications\r\n    }));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <button className=\"add-patient-btn\" onClick={handleAddClick}>\r\n        + Add New Patient\r\n      </button>\r\n\r\n      {showForm && (\r\n        <form className=\"patient-form\" onSubmit={handleSubmit}>\r\n          <h2>{isEditing ? 'Edit Patient' : 'Add New Patient'}</h2>\r\n          <label>\r\n            Name:\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n              value={form.name}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Age:\r\n            <input\r\n              type=\"number\"\r\n              name=\"age\"\r\n              placeholder=\"Age\"\r\n              value={form.age}\r\n              onChange={handleChange}\r\n              required\r\n              min=\"0\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Date of Birth:\r\n            <input\r\n              type=\"date\"\r\n              name=\"dateOfBirth\"\r\n              value={form.dateOfBirth}\r\n              onChange={handleChange}\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Condition:\r\n            <input\r\n              type=\"text\"\r\n              name=\"condition\"\r\n              placeholder=\"Condition\"\r\n              value={form.condition}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Emergency Contact:\r\n            <input\r\n              type=\"text\"\r\n              name=\"emergencyContact\"\r\n              placeholder=\"Emergency Contact\"\r\n              value={form.emergencyContact}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n\r\n          {/* --- Activity and Medication Input for the FORM --- */}\r\n          <div style={{ margin: '1rem 0' }}>\r\n            <ActivityLog\r\n              activities={Array.isArray(form.activities) ? form.activities : []}\r\n              setActivities={updateActivitiesInForm} // Use the specific updater for form activities\r\n              readOnly={false} // Allow adding activities to the form's temporary state\r\n              // Do NOT pass patientId or onActivityAdded here, as this is for form temporary state\r\n            />\r\n            <MedicationTracker\r\n              medications={Array.isArray(form.medications) ? form.medications : []}\r\n              setMedications={updateMedicationsInForm} // Use the specific updater for form medications\r\n              readOnly={false} // Allow adding medications to the form's temporary state\r\n              // Do NOT pass patientId or onMedicationAdded here, as this is for form temporary state\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-actions\">\r\n            <button type=\"submit\">{isEditing ? 'Save Changes' : 'Add Patient'}</button>\r\n            <button type=\"button\" onClick={handleCancel} className=\"cancel-btn\">\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n\r\n      {/* --- Patient Card Display --- */}\r\n      {/* Assuming 'patients' state in Dashboard is for a list of patient IDs,\r\n          and PatientCard fetches its own full data.\r\n          If Dashboard holds full patient data, you'd map that data directly */}\r\n      <div className=\"patients-grid\">\r\n        {/* Placeholder: You'll need to fetch actual patient IDs to map here */}\r\n        {/* For demonstration, let's assume some dummy IDs or fetch them initially */}\r\n        {[\r\n          { _id: '666e2c34d3d21a2c98a7b0a7', name: 'John Doe' }, // Example ID from MongoDB\r\n          { _id: '666e2c34d3d21a2c98a7b0a8', name: 'Jane Smith' }\r\n        ].map(p => (\r\n          <div key={p._id} className=\"patient-card-wrapper\">\r\n             {/* Pass the actual patient ID to PatientCard */}\r\n             <PatientCard patientId={p._id} />\r\n             {/* Add an edit button here that triggers handleEdit with the patient's _id */}\r\n             <button onClick={() => handleEdit(p._id)}>Edit Patient Data</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}