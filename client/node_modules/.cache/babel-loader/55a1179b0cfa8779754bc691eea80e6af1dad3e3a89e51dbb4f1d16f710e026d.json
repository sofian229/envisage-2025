{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = {\n      message: [],\n      open: [],\n      close: [],\n      error: []\n    };\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isConnecting = false;\n    this.messageQueue = [];\n    this.pingInterval = null;\n  }\n  connect(token) {\n    if (!token) {\n      console.error('Cannot connect WebSocket: No token provided');\n      return;\n    }\n\n    // Prevent multiple connection attempts\n    if (this.isConnecting) {\n      console.log('WebSocket connection already in progress');\n      return;\n    }\n\n    // Check if already connected\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      console.log('WebSocket already connected');\n      this.processMessageQueue();\n      return;\n    }\n\n    // Clean up any existing socket\n    this.cleanup();\n    this.isConnecting = true;\n    console.log('Connecting to WebSocket...');\n    try {\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${window.location.hostname}:5000/ws?token=${token}`;\n      console.log(`Connecting to WebSocket at ${wsUrl}`);\n      this.socket = new WebSocket(wsUrl);\n      this.socket.onopen = () => {\n        console.log('WebSocket connected successfully');\n        this.reconnectAttempts = 0;\n        this.isConnecting = false;\n        this.notifyListeners('open');\n        this.processMessageQueue();\n\n        // Set up ping to keep connection alive\n        this.setupPing();\n      };\n      this.socket.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message received:', data);\n          this.notifyListeners('message', data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.socket.onclose = event => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        this.isConnecting = false;\n        this.notifyListeners('close', event);\n\n        // Clear ping interval\n        if (this.pingInterval) {\n          clearInterval(this.pingInterval);\n          this.pingInterval = null;\n        }\n\n        // Attempt to reconnect if not a normal closure\n        if (event.code !== 1000 && event.code !== 1001) {\n          this.attemptReconnect(token);\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.isConnecting = false;\n        this.notifyListeners('error', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      this.isConnecting = false;\n      this.attemptReconnect(token);\n    }\n  }\n  setupPing() {\n    // Clear any existing interval\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n\n    // Send a ping message every 25 seconds to keep the connection alive\n    this.pingInterval = setInterval(() => {\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n        // Send a simple ping message\n        this.sendMessage({\n          type: 'ping'\n        });\n      } else {\n        clearInterval(this.pingInterval);\n        this.pingInterval = null;\n      }\n    }, 25000);\n  }\n  cleanup() {\n    // Clear ping interval\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n\n    // Clean up socket\n    if (this.socket) {\n      // Store reference to avoid issues during cleanup\n      const socket = this.socket;\n      this.socket = null;\n\n      // Remove event handlers\n      socket.onclose = null;\n      socket.onerror = null;\n      socket.onmessage = null;\n      socket.onopen = null;\n\n      // Close if needed\n      if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\n        try {\n          socket.close();\n        } catch (e) {\n          console.error('Error closing WebSocket:', e);\n        }\n      }\n    }\n  }\n  attemptReconnect(token) {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Max reconnect attempts reached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n    console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\n    clearTimeout(this.reconnectTimeout);\n    this.reconnectTimeout = setTimeout(() => {\n      this.connect(token);\n    }, delay);\n  }\n  disconnect() {\n    clearTimeout(this.reconnectTimeout);\n    this.cleanup();\n    this.isConnecting = false;\n    this.reconnectAttempts = 0;\n    this.messageQueue = [];\n  }\n  processMessageQueue() {\n    if (this.messageQueue.length > 0 && this.socket && this.socket.readyState === WebSocket.OPEN) {\n      console.log(`Processing message queue (${this.messageQueue.length} messages)...`);\n      while (this.messageQueue.length > 0) {\n        const message = this.messageQueue.shift();\n        try {\n          this.socket.send(JSON.stringify(message));\n        } catch (e) {\n          console.error('Error sending queued message:', e);\n          // Put the message back in the queue\n          this.messageQueue.unshift(message);\n          break;\n        }\n      }\n    }\n  }\n  sendMessage(data) {\n    if (!data) return;\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      try {\n        this.socket.send(JSON.stringify(data));\n      } catch (e) {\n        console.error('Error sending WebSocket message:', e);\n        this.messageQueue.push(data);\n      }\n    } else {\n      console.log('WebSocket not connected, adding message to queue');\n      this.messageQueue.push(data);\n\n      // Try to reconnect if not already connecting\n      if (!this.isConnecting) {\n        const token = localStorage.getItem('userToken');\n        if (token) {\n          this.connect(token);\n        }\n      }\n    }\n  }\n  addListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event].push(callback);\n    }\n  }\n  removeListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    }\n  }\n  notifyListeners(event, data) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in ${event} listener:`, error);\n        }\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport default webSocketService;","map":{"version":3,"names":["WebSocketService","constructor","socket","listeners","message","open","close","error","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isConnecting","messageQueue","pingInterval","connect","token","console","log","readyState","WebSocket","OPEN","processMessageQueue","cleanup","wsProtocol","window","location","protocol","wsUrl","hostname","onopen","notifyListeners","setupPing","onmessage","event","data","JSON","parse","onclose","code","reason","clearInterval","attemptReconnect","onerror","setInterval","sendMessage","type","CONNECTING","e","delay","Math","min","pow","clearTimeout","setTimeout","disconnect","length","shift","send","stringify","unshift","push","localStorage","getItem","addListener","callback","removeListener","filter","cb","forEach","webSocketService"],"sources":["C:/Programming/Clubs/CIS/HackPrix/drift-guard-1pm/client/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = {\r\n      message: [],\r\n      open: [],\r\n      close: [],\r\n      error: []\r\n    };\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectTimeout = null;\r\n    this.isConnecting = false;\r\n    this.messageQueue = [];\r\n    this.pingInterval = null;\r\n  }\r\n\r\n  connect(token) {\r\n    if (!token) {\r\n      console.error('Cannot connect WebSocket: No token provided');\r\n      return;\r\n    }\r\n    \r\n    // Prevent multiple connection attempts\r\n    if (this.isConnecting) {\r\n      console.log('WebSocket connection already in progress');\r\n      return;\r\n    }\r\n    \r\n    // Check if already connected\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      console.log('WebSocket already connected');\r\n      this.processMessageQueue();\r\n      return;\r\n    }\r\n    \r\n    // Clean up any existing socket\r\n    this.cleanup();\r\n\r\n    this.isConnecting = true;\r\n    console.log('Connecting to WebSocket...');\r\n    \r\n    try {\r\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      const wsUrl = `${wsProtocol}//${window.location.hostname}:5000/ws?token=${token}`;\r\n      \r\n      console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n      this.socket = new WebSocket(wsUrl);\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket connected successfully');\r\n        this.reconnectAttempts = 0;\r\n        this.isConnecting = false;\r\n        this.notifyListeners('open');\r\n        this.processMessageQueue();\r\n        \r\n        // Set up ping to keep connection alive\r\n        this.setupPing();\r\n      };\r\n\r\n      this.socket.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('WebSocket message received:', data);\r\n          this.notifyListeners('message', data);\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.socket.onclose = (event) => {\r\n        console.log('WebSocket disconnected:', event.code, event.reason);\r\n        this.isConnecting = false;\r\n        this.notifyListeners('close', event);\r\n        \r\n        // Clear ping interval\r\n        if (this.pingInterval) {\r\n          clearInterval(this.pingInterval);\r\n          this.pingInterval = null;\r\n        }\r\n        \r\n        // Attempt to reconnect if not a normal closure\r\n        if (event.code !== 1000 && event.code !== 1001) {\r\n          this.attemptReconnect(token);\r\n        }\r\n      };\r\n\r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.isConnecting = false;\r\n        this.notifyListeners('error', error);\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating WebSocket connection:', error);\r\n      this.isConnecting = false;\r\n      this.attemptReconnect(token);\r\n    }\r\n  }\r\n\r\n  setupPing() {\r\n    // Clear any existing interval\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n    }\r\n    \r\n    // Send a ping message every 25 seconds to keep the connection alive\r\n    this.pingInterval = setInterval(() => {\r\n      if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n        // Send a simple ping message\r\n        this.sendMessage({ type: 'ping' });\r\n      } else {\r\n        clearInterval(this.pingInterval);\r\n        this.pingInterval = null;\r\n      }\r\n    }, 25000);\r\n  }\r\n\r\n  cleanup() {\r\n    // Clear ping interval\r\n    if (this.pingInterval) {\r\n      clearInterval(this.pingInterval);\r\n      this.pingInterval = null;\r\n    }\r\n    \r\n    // Clean up socket\r\n    if (this.socket) {\r\n      // Store reference to avoid issues during cleanup\r\n      const socket = this.socket;\r\n      this.socket = null;\r\n      \r\n      // Remove event handlers\r\n      socket.onclose = null;\r\n      socket.onerror = null;\r\n      socket.onmessage = null;\r\n      socket.onopen = null;\r\n      \r\n      // Close if needed\r\n      if (socket.readyState === WebSocket.OPEN || \r\n          socket.readyState === WebSocket.CONNECTING) {\r\n        try {\r\n          socket.close();\r\n        } catch (e) {\r\n          console.error('Error closing WebSocket:', e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  attemptReconnect(token) {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('Max reconnect attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\r\n    \r\n    console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\r\n    \r\n    clearTimeout(this.reconnectTimeout);\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      this.connect(token);\r\n    }, delay);\r\n  }\r\n\r\n  disconnect() {\r\n    clearTimeout(this.reconnectTimeout);\r\n    this.cleanup();\r\n    this.isConnecting = false;\r\n    this.reconnectAttempts = 0;\r\n    this.messageQueue = [];\r\n  }\r\n\r\n  processMessageQueue() {\r\n    if (this.messageQueue.length > 0 && this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      console.log(`Processing message queue (${this.messageQueue.length} messages)...`);\r\n      while (this.messageQueue.length > 0) {\r\n        const message = this.messageQueue.shift();\r\n        try {\r\n          this.socket.send(JSON.stringify(message));\r\n        } catch (e) {\r\n          console.error('Error sending queued message:', e);\r\n          // Put the message back in the queue\r\n          this.messageQueue.unshift(message);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sendMessage(data) {\r\n    if (!data) return;\r\n    \r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      try {\r\n        this.socket.send(JSON.stringify(data));\r\n      } catch (e) {\r\n        console.error('Error sending WebSocket message:', e);\r\n        this.messageQueue.push(data);\r\n      }\r\n    } else {\r\n      console.log('WebSocket not connected, adding message to queue');\r\n      this.messageQueue.push(data);\r\n      \r\n      // Try to reconnect if not already connecting\r\n      if (!this.isConnecting) {\r\n        const token = localStorage.getItem('userToken');\r\n        if (token) {\r\n          this.connect(token);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].push(callback);\r\n    }\r\n  }\r\n\r\n  removeListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n\r\n  notifyListeners(event, data) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in ${event} listener:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst webSocketService = new WebSocketService();\r\nexport default webSocketService;\r\n\r\n"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,SAAS,GAAG;MACfC,OAAO,EAAE,EAAE;MACXC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT,CAAC;IACD,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAC7B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,YAAY,GAAG,IAAI;EAC1B;EAEAC,OAAOA,CAACC,KAAK,EAAE;IACb,IAAI,CAACA,KAAK,EAAE;MACVC,OAAO,CAACT,KAAK,CAAC,6CAA6C,CAAC;MAC5D;IACF;;IAEA;IACA,IAAI,IAAI,CAACI,YAAY,EAAE;MACrBK,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD;IACF;;IAEA;IACA,IAAI,IAAI,CAACf,MAAM,IAAI,IAAI,CAACA,MAAM,CAACgB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC5DJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI,CAACI,mBAAmB,CAAC,CAAC;MAC1B;IACF;;IAEA;IACA,IAAI,CAACC,OAAO,CAAC,CAAC;IAEd,IAAI,CAACX,YAAY,GAAG,IAAI;IACxBK,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAEzC,IAAI;MACF,MAAMM,UAAU,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG,KAAK;MACzE,MAAMC,KAAK,GAAG,GAAGJ,UAAU,KAAKC,MAAM,CAACC,QAAQ,CAACG,QAAQ,kBAAkBb,KAAK,EAAE;MAEjFC,OAAO,CAACC,GAAG,CAAC,8BAA8BU,KAAK,EAAE,CAAC;MAClD,IAAI,CAACzB,MAAM,GAAG,IAAIiB,SAAS,CAACQ,KAAK,CAAC;MAElC,IAAI,CAACzB,MAAM,CAAC2B,MAAM,GAAG,MAAM;QACzBb,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAACT,iBAAiB,GAAG,CAAC;QAC1B,IAAI,CAACG,YAAY,GAAG,KAAK;QACzB,IAAI,CAACmB,eAAe,CAAC,MAAM,CAAC;QAC5B,IAAI,CAACT,mBAAmB,CAAC,CAAC;;QAE1B;QACA,IAAI,CAACU,SAAS,CAAC,CAAC;MAClB,CAAC;MAED,IAAI,CAAC7B,MAAM,CAAC8B,SAAS,GAAIC,KAAK,IAAK;QACjC,IAAI;UACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;UACnClB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEiB,IAAI,CAAC;UAChD,IAAI,CAACJ,eAAe,CAAC,SAAS,EAAEI,IAAI,CAAC;QACvC,CAAC,CAAC,OAAO3B,KAAK,EAAE;UACdS,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;MACF,CAAC;MAED,IAAI,CAACL,MAAM,CAACmC,OAAO,GAAIJ,KAAK,IAAK;QAC/BjB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEgB,KAAK,CAACK,IAAI,EAAEL,KAAK,CAACM,MAAM,CAAC;QAChE,IAAI,CAAC5B,YAAY,GAAG,KAAK;QACzB,IAAI,CAACmB,eAAe,CAAC,OAAO,EAAEG,KAAK,CAAC;;QAEpC;QACA,IAAI,IAAI,CAACpB,YAAY,EAAE;UACrB2B,aAAa,CAAC,IAAI,CAAC3B,YAAY,CAAC;UAChC,IAAI,CAACA,YAAY,GAAG,IAAI;QAC1B;;QAEA;QACA,IAAIoB,KAAK,CAACK,IAAI,KAAK,IAAI,IAAIL,KAAK,CAACK,IAAI,KAAK,IAAI,EAAE;UAC9C,IAAI,CAACG,gBAAgB,CAAC1B,KAAK,CAAC;QAC9B;MACF,CAAC;MAED,IAAI,CAACb,MAAM,CAACwC,OAAO,GAAInC,KAAK,IAAK;QAC/BS,OAAO,CAACT,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxC,IAAI,CAACI,YAAY,GAAG,KAAK;QACzB,IAAI,CAACmB,eAAe,CAAC,OAAO,EAAEvB,KAAK,CAAC;MACtC,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,IAAI,CAACI,YAAY,GAAG,KAAK;MACzB,IAAI,CAAC8B,gBAAgB,CAAC1B,KAAK,CAAC;IAC9B;EACF;EAEAgB,SAASA,CAAA,EAAG;IACV;IACA,IAAI,IAAI,CAAClB,YAAY,EAAE;MACrB2B,aAAa,CAAC,IAAI,CAAC3B,YAAY,CAAC;IAClC;;IAEA;IACA,IAAI,CAACA,YAAY,GAAG8B,WAAW,CAAC,MAAM;MACpC,IAAI,IAAI,CAACzC,MAAM,IAAI,IAAI,CAACA,MAAM,CAACgB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;QAC5D;QACA,IAAI,CAACwB,WAAW,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC,CAAC;MACpC,CAAC,MAAM;QACLL,aAAa,CAAC,IAAI,CAAC3B,YAAY,CAAC;QAChC,IAAI,CAACA,YAAY,GAAG,IAAI;MAC1B;IACF,CAAC,EAAE,KAAK,CAAC;EACX;EAEAS,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,IAAI,CAACT,YAAY,EAAE;MACrB2B,aAAa,CAAC,IAAI,CAAC3B,YAAY,CAAC;MAChC,IAAI,CAACA,YAAY,GAAG,IAAI;IAC1B;;IAEA;IACA,IAAI,IAAI,CAACX,MAAM,EAAE;MACf;MACA,MAAMA,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAI,CAACA,MAAM,GAAG,IAAI;;MAElB;MACAA,MAAM,CAACmC,OAAO,GAAG,IAAI;MACrBnC,MAAM,CAACwC,OAAO,GAAG,IAAI;MACrBxC,MAAM,CAAC8B,SAAS,GAAG,IAAI;MACvB9B,MAAM,CAAC2B,MAAM,GAAG,IAAI;;MAEpB;MACA,IAAI3B,MAAM,CAACgB,UAAU,KAAKC,SAAS,CAACC,IAAI,IACpClB,MAAM,CAACgB,UAAU,KAAKC,SAAS,CAAC2B,UAAU,EAAE;QAC9C,IAAI;UACF5C,MAAM,CAACI,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,OAAOyC,CAAC,EAAE;UACV/B,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEwC,CAAC,CAAC;QAC9C;MACF;IACF;EACF;EAEAN,gBAAgBA,CAAC1B,KAAK,EAAE;IACtB,IAAI,IAAI,CAACP,iBAAiB,IAAI,IAAI,CAACC,oBAAoB,EAAE;MACvDO,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C;IACF;IAEA,IAAI,CAACT,iBAAiB,EAAE;IACxB,MAAMwC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,GAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC3C,iBAAiB,CAAC,EAAE,KAAK,CAAC;IAEzEQ,OAAO,CAACC,GAAG,CAAC,8BAA8B+B,KAAK,eAAe,IAAI,CAACxC,iBAAiB,GAAG,CAAC;IAExF4C,YAAY,CAAC,IAAI,CAAC1C,gBAAgB,CAAC;IACnC,IAAI,CAACA,gBAAgB,GAAG2C,UAAU,CAAC,MAAM;MACvC,IAAI,CAACvC,OAAO,CAACC,KAAK,CAAC;IACrB,CAAC,EAAEiC,KAAK,CAAC;EACX;EAEAM,UAAUA,CAAA,EAAG;IACXF,YAAY,CAAC,IAAI,CAAC1C,gBAAgB,CAAC;IACnC,IAAI,CAACY,OAAO,CAAC,CAAC;IACd,IAAI,CAACX,YAAY,GAAG,KAAK;IACzB,IAAI,CAACH,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACI,YAAY,GAAG,EAAE;EACxB;EAEAS,mBAAmBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACT,YAAY,CAAC2C,MAAM,GAAG,CAAC,IAAI,IAAI,CAACrD,MAAM,IAAI,IAAI,CAACA,MAAM,CAACgB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC5FJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,IAAI,CAACL,YAAY,CAAC2C,MAAM,eAAe,CAAC;MACjF,OAAO,IAAI,CAAC3C,YAAY,CAAC2C,MAAM,GAAG,CAAC,EAAE;QACnC,MAAMnD,OAAO,GAAG,IAAI,CAACQ,YAAY,CAAC4C,KAAK,CAAC,CAAC;QACzC,IAAI;UACF,IAAI,CAACtD,MAAM,CAACuD,IAAI,CAACtB,IAAI,CAACuB,SAAS,CAACtD,OAAO,CAAC,CAAC;QAC3C,CAAC,CAAC,OAAO2C,CAAC,EAAE;UACV/B,OAAO,CAACT,KAAK,CAAC,+BAA+B,EAAEwC,CAAC,CAAC;UACjD;UACA,IAAI,CAACnC,YAAY,CAAC+C,OAAO,CAACvD,OAAO,CAAC;UAClC;QACF;MACF;IACF;EACF;EAEAwC,WAAWA,CAACV,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,EAAE;IAEX,IAAI,IAAI,CAAChC,MAAM,IAAI,IAAI,CAACA,MAAM,CAACgB,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC5D,IAAI;QACF,IAAI,CAAClB,MAAM,CAACuD,IAAI,CAACtB,IAAI,CAACuB,SAAS,CAACxB,IAAI,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOa,CAAC,EAAE;QACV/B,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEwC,CAAC,CAAC;QACpD,IAAI,CAACnC,YAAY,CAACgD,IAAI,CAAC1B,IAAI,CAAC;MAC9B;IACF,CAAC,MAAM;MACLlB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAC/D,IAAI,CAACL,YAAY,CAACgD,IAAI,CAAC1B,IAAI,CAAC;;MAE5B;MACA,IAAI,CAAC,IAAI,CAACvB,YAAY,EAAE;QACtB,MAAMI,KAAK,GAAG8C,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,IAAI/C,KAAK,EAAE;UACT,IAAI,CAACD,OAAO,CAACC,KAAK,CAAC;QACrB;MACF;IACF;EACF;EAEAgD,WAAWA,CAAC9B,KAAK,EAAE+B,QAAQ,EAAE;IAC3B,IAAI,IAAI,CAAC7D,SAAS,CAAC8B,KAAK,CAAC,EAAE;MACzB,IAAI,CAAC9B,SAAS,CAAC8B,KAAK,CAAC,CAAC2B,IAAI,CAACI,QAAQ,CAAC;IACtC;EACF;EAEAC,cAAcA,CAAChC,KAAK,EAAE+B,QAAQ,EAAE;IAC9B,IAAI,IAAI,CAAC7D,SAAS,CAAC8B,KAAK,CAAC,EAAE;MACzB,IAAI,CAAC9B,SAAS,CAAC8B,KAAK,CAAC,GAAG,IAAI,CAAC9B,SAAS,CAAC8B,KAAK,CAAC,CAACiC,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKH,QAAQ,CAAC;IAC7E;EACF;EAEAlC,eAAeA,CAACG,KAAK,EAAEC,IAAI,EAAE;IAC3B,IAAI,IAAI,CAAC/B,SAAS,CAAC8B,KAAK,CAAC,EAAE;MACzB,IAAI,CAAC9B,SAAS,CAAC8B,KAAK,CAAC,CAACmC,OAAO,CAACJ,QAAQ,IAAI;QACxC,IAAI;UACFA,QAAQ,CAAC9B,IAAI,CAAC;QAChB,CAAC,CAAC,OAAO3B,KAAK,EAAE;UACdS,OAAO,CAACT,KAAK,CAAC,YAAY0B,KAAK,YAAY,EAAE1B,KAAK,CAAC;QACrD;MACF,CAAC,CAAC;IACJ;EACF;AACF;AAEA,MAAM8D,gBAAgB,GAAG,IAAIrE,gBAAgB,CAAC,CAAC;AAC/C,eAAeqE,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}