{"ast":null,"code":"import webSocketService from './websocket';\nclass LocationService {\n  constructor() {\n    this.watchId = null;\n    this.isTracking = false;\n    this.listeners = {\n      update: [],\n      error: []\n    };\n    this.options = {\n      enableHighAccuracy: true,\n      maximumAge: 5000,\n      timeout: 10000\n    };\n    this.lastPosition = null;\n    this.minUpdateInterval = 2000; // Minimum time between updates in ms\n    this.lastUpdateTime = 0;\n    this.errorCount = 0;\n    this.maxErrorCount = 3;\n  }\n  updateCoordinates(coordinates) {\n    this.latestCoordinates = coordinates;\n  }\n  startTracking() {\n    if (!navigator.geolocation) {\n      this.notifyListeners('error', new Error('Geolocation is not supported by your browser'));\n      return false;\n    }\n    if (this.isTracking) {\n      return true;\n    }\n    try {\n      // Reset error count\n      this.errorCount = 0;\n\n      // First try to get current position immediately\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"Initial position obtained:\", position);\n        this.handlePositionUpdate(position);\n\n        // Then start watching for position updates\n        this.watchId = navigator.geolocation.watchPosition(this.handlePositionUpdate.bind(this), this.handlePositionError.bind(this), this.options);\n      }, error => {\n        console.error(\"Error getting initial position:\", error);\n        this.handlePositionError(error);\n\n        // Still try to watch position even if initial position fails\n        this.watchId = navigator.geolocation.watchPosition(this.handlePositionUpdate.bind(this), this.handlePositionError.bind(this), this.options);\n      }, this.options);\n      this.isTracking = true;\n      return true;\n    } catch (error) {\n      console.error(\"Error in startTracking:\", error);\n      this.notifyListeners('error', error);\n      return false;\n    }\n  }\n  stopTracking() {\n    if (this.watchId !== null) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n      this.isTracking = false;\n    }\n  }\n  handlePositionUpdate(position) {\n    console.log(\"Position update received:\", position);\n    const now = Date.now();\n\n    // Throttle updates to prevent too frequent position changes\n    if (now - this.lastUpdateTime < this.minUpdateInterval) {\n      console.log(\"Update throttled (too frequent)\");\n      return;\n    }\n\n    // Check if position has changed significantly\n    if (this.lastPosition) {\n      const prevLat = this.lastPosition.coords.latitude;\n      const prevLng = this.lastPosition.coords.longitude;\n      const newLat = position.coords.latitude;\n      const newLng = position.coords.longitude;\n\n      // Calculate distance (very rough approximation)\n      const distance = Math.sqrt(Math.pow(newLat - prevLat, 2) + Math.pow(newLng - prevLng, 2));\n\n      // If position hasn't changed much, don't update\n      if (distance < 0.00001) {\n        // Very small threshold\n        console.log(\"Update throttled (position hasn't changed)\");\n        return;\n      }\n    }\n    this.lastPosition = position;\n    this.lastUpdateTime = now;\n    const coordinates = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n      accuracy: position.coords.accuracy,\n      timestamp: position.timestamp\n    };\n    console.log(\"Sending coordinates to listeners:\", coordinates);\n\n    // Reset error count on successful update\n    this.errorCount = 0;\n\n    // Notify local listeners\n    this.notifyListeners('update', coordinates);\n\n    // Send to server via WebSocket\n    webSocketService.sendMessage({\n      type: 'locationUpdate',\n      coordinates\n    });\n  }\n  handlePositionError(error) {\n    console.error(\"Position error:\", error);\n    this.errorCount++;\n\n    // If we've had too many errors, stop tracking\n    if (this.errorCount >= this.maxErrorCount) {\n      console.log(\"Too many errors, stopping tracking\");\n      this.stopTracking();\n    }\n    let errorMessage;\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errorMessage = 'Location access denied. Please enable location services in your browser settings.';\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errorMessage = 'Location information is unavailable. Please check your device GPS or try again later.';\n        break;\n      case error.TIMEOUT:\n        errorMessage = 'Location request timed out. Please check your internet connection.';\n        break;\n      default:\n        errorMessage = 'An unknown error occurred while getting location.';\n    }\n    const errorObj = new Error(errorMessage);\n    errorObj.originalError = error;\n    this.notifyListeners('error', errorObj);\n  }\n  addListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event].push(callback);\n    }\n  }\n  removeListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    }\n  }\n  removeAllListeners() {\n    this.listeners = {\n      update: [],\n      error: []\n    };\n  }\n  notifyListeners(event, data) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in ${event} listener:`, error);\n        }\n      });\n    }\n  }\n}\nconst locationService = new LocationService();\nexport default locationService;","map":{"version":3,"names":["webSocketService","LocationService","constructor","watchId","isTracking","listeners","update","error","options","enableHighAccuracy","maximumAge","timeout","lastPosition","minUpdateInterval","lastUpdateTime","errorCount","maxErrorCount","updateCoordinates","coordinates","latestCoordinates","startTracking","navigator","geolocation","notifyListeners","Error","getCurrentPosition","position","console","log","handlePositionUpdate","watchPosition","bind","handlePositionError","stopTracking","clearWatch","now","Date","prevLat","coords","latitude","prevLng","longitude","newLat","newLng","distance","Math","sqrt","pow","accuracy","timestamp","sendMessage","type","errorMessage","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","errorObj","originalError","addListener","event","callback","push","removeListener","filter","cb","removeAllListeners","data","forEach","locationService"],"sources":["C:/Programming/Clubs/CIS/HackPrix/drift-guard-1pm/client/src/utils/locationService.js"],"sourcesContent":["import webSocketService from './websocket';\r\n\r\nclass LocationService {\r\n  constructor() {\r\n    this.watchId = null;\r\n    this.isTracking = false;\r\n    this.listeners = {\r\n      update: [],\r\n      error: []\r\n    };\r\n    this.options = {\r\n      enableHighAccuracy: true,\r\n      maximumAge: 5000,\r\n      timeout: 10000\r\n    };\r\n    this.lastPosition = null;\r\n    this.minUpdateInterval = 2000; // Minimum time between updates in ms\r\n    this.lastUpdateTime = 0;\r\n    this.errorCount = 0;\r\n    this.maxErrorCount = 3;\r\n    \r\n\r\n  }\r\n\r\n  updateCoordinates(coordinates) {\r\n  this.latestCoordinates = coordinates;\r\n}\r\n\r\n\r\n  startTracking() {\r\n    if (!navigator.geolocation) {\r\n      this.notifyListeners('error', new Error('Geolocation is not supported by your browser'));\r\n      return false;\r\n    }\r\n    \r\n    if (this.isTracking) {\r\n      return true;\r\n    }\r\n    \r\n    try {\r\n      // Reset error count\r\n      this.errorCount = 0;\r\n      \r\n      // First try to get current position immediately\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          console.log(\"Initial position obtained:\", position);\r\n          this.handlePositionUpdate(position);\r\n          \r\n          // Then start watching for position updates\r\n          this.watchId = navigator.geolocation.watchPosition(\r\n            this.handlePositionUpdate.bind(this),\r\n            this.handlePositionError.bind(this),\r\n            this.options\r\n          );\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting initial position:\", error);\r\n          this.handlePositionError(error);\r\n          \r\n          // Still try to watch position even if initial position fails\r\n          this.watchId = navigator.geolocation.watchPosition(\r\n            this.handlePositionUpdate.bind(this),\r\n            this.handlePositionError.bind(this),\r\n            this.options\r\n          );\r\n        },\r\n        this.options\r\n      );\r\n      \r\n      this.isTracking = true;\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error in startTracking:\", error);\r\n      this.notifyListeners('error', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  stopTracking() {\r\n    if (this.watchId !== null) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n      this.isTracking = false;\r\n    }\r\n  }\r\n\r\n  handlePositionUpdate(position) {\r\n    console.log(\"Position update received:\", position);\r\n    const now = Date.now();\r\n    \r\n    // Throttle updates to prevent too frequent position changes\r\n    if (now - this.lastUpdateTime < this.minUpdateInterval) {\r\n      console.log(\"Update throttled (too frequent)\");\r\n      return;\r\n    }\r\n    \r\n    // Check if position has changed significantly\r\n    if (this.lastPosition) {\r\n      const prevLat = this.lastPosition.coords.latitude;\r\n      const prevLng = this.lastPosition.coords.longitude;\r\n      const newLat = position.coords.latitude;\r\n      const newLng = position.coords.longitude;\r\n      \r\n      // Calculate distance (very rough approximation)\r\n      const distance = Math.sqrt(\r\n        Math.pow(newLat - prevLat, 2) + \r\n        Math.pow(newLng - prevLng, 2)\r\n      );\r\n      \r\n      // If position hasn't changed much, don't update\r\n      if (distance < 0.00001) { // Very small threshold\r\n        console.log(\"Update throttled (position hasn't changed)\");\r\n        return;\r\n      }\r\n    }\r\n    \r\n    this.lastPosition = position;\r\n    this.lastUpdateTime = now;\r\n    \r\n    const coordinates = {\r\n      latitude: position.coords.latitude,\r\n      longitude: position.coords.longitude,\r\n      accuracy: position.coords.accuracy,\r\n      timestamp: position.timestamp\r\n    };\r\n    \r\n    console.log(\"Sending coordinates to listeners:\", coordinates);\r\n    \r\n    // Reset error count on successful update\r\n    this.errorCount = 0;\r\n    \r\n    // Notify local listeners\r\n    this.notifyListeners('update', coordinates);\r\n    \r\n    // Send to server via WebSocket\r\n    webSocketService.sendMessage({\r\n      type: 'locationUpdate',\r\n      coordinates\r\n    });\r\n  }\r\n\r\n  handlePositionError(error) {\r\n    console.error(\"Position error:\", error);\r\n    this.errorCount++;\r\n    \r\n    // If we've had too many errors, stop tracking\r\n    if (this.errorCount >= this.maxErrorCount) {\r\n      console.log(\"Too many errors, stopping tracking\");\r\n      this.stopTracking();\r\n    }\r\n    \r\n    let errorMessage;\r\n    \r\n    switch (error.code) {\r\n      case error.PERMISSION_DENIED:\r\n        errorMessage = 'Location access denied. Please enable location services in your browser settings.';\r\n        break;\r\n      case error.POSITION_UNAVAILABLE:\r\n        errorMessage = 'Location information is unavailable. Please check your device GPS or try again later.';\r\n        break;\r\n      case error.TIMEOUT:\r\n        errorMessage = 'Location request timed out. Please check your internet connection.';\r\n        break;\r\n      default:\r\n        errorMessage = 'An unknown error occurred while getting location.';\r\n    }\r\n    \r\n    const errorObj = new Error(errorMessage);\r\n    errorObj.originalError = error;\r\n    \r\n    this.notifyListeners('error', errorObj);\r\n  }\r\n\r\n  addListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].push(callback);\r\n    }\r\n  }\r\n\r\n  removeListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n  \r\n  removeAllListeners() {\r\n    this.listeners = {\r\n      update: [],\r\n      error: []\r\n    };\r\n  }\r\n\r\n  notifyListeners(event, data) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in ${event} listener:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst locationService = new LocationService();\r\nexport default locationService;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}