{"ast":null,"code":"import webSocketService from './websocket';\nclass LocationService {\n  constructor() {\n    this.watchId = null;\n    this.lastPosition = null;\n    this.listeners = new Map();\n    this.isTracking = false;\n    this.locationUpdateInterval = null;\n  }\n  startTracking() {\n    if (this.isTracking) return;\n    if (!navigator.geolocation) {\n      this.notifyListeners('error', {\n        message: 'Geolocation is not supported by your browser'\n      });\n      return false;\n    }\n    try {\n      this.isTracking = true;\n\n      // Options for high accuracy\n      const options = {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: 5000\n      };\n\n      // Watch position continuously\n      this.watchId = navigator.geolocation.watchPosition(this.handlePositionUpdate.bind(this), this.handlePositionError.bind(this), options);\n\n      // Also set up a regular interval to ensure updates are sent\n      this.locationUpdateInterval = setInterval(() => {\n        if (this.lastPosition) {\n          this.sendLocationUpdate(this.lastPosition);\n        }\n      }, 10000); // Send update every 10 seconds as a fallback\n\n      return true;\n    } catch (error) {\n      console.error('Error starting location tracking:', error);\n      this.notifyListeners('error', error);\n      return false;\n    }\n  }\n  stopTracking() {\n    if (this.watchId !== null) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n    if (this.locationUpdateInterval) {\n      clearInterval(this.locationUpdateInterval);\n      this.locationUpdateInterval = null;\n    }\n    this.isTracking = false;\n  }\n  handlePositionUpdate(position) {\n    const coordinates = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    };\n    this.lastPosition = coordinates;\n    this.notifyListeners('update', coordinates);\n    this.sendLocationUpdate(coordinates);\n  }\n  handlePositionError(error) {\n    console.error('Geolocation error:', error);\n    this.notifyListeners('error', error);\n  }\n  sendLocationUpdate(coordinates) {\n    return webSocketService.sendLocation(coordinates);\n  }\n  addListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  removeListener(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\n\n// Create a singleton instance\nconst locationService = new LocationService();\nexport default locationService;","map":{"version":3,"names":["webSocketService","LocationService","constructor","watchId","lastPosition","listeners","Map","isTracking","locationUpdateInterval","startTracking","navigator","geolocation","notifyListeners","message","options","enableHighAccuracy","maximumAge","timeout","watchPosition","handlePositionUpdate","bind","handlePositionError","setInterval","sendLocationUpdate","error","console","stopTracking","clearWatch","clearInterval","position","coordinates","latitude","coords","longitude","sendLocation","addListener","event","callback","has","set","get","push","removeListener","callbacks","index","indexOf","splice","data","forEach","locationService"],"sources":["C:/Programming/Clubs/CIS/HackPrix/drift-guard-1pm/client/src/utils/locationService.js"],"sourcesContent":["import webSocketService from './websocket';\n\nclass LocationService {\n  constructor() {\n    this.watchId = null;\n    this.lastPosition = null;\n    this.listeners = new Map();\n    this.isTracking = false;\n    this.locationUpdateInterval = null;\n  }\n\n  startTracking() {\n    if (this.isTracking) return;\n\n    if (!navigator.geolocation) {\n      this.notifyListeners('error', { message: 'Geolocation is not supported by your browser' });\n      return false;\n    }\n\n    try {\n      this.isTracking = true;\n      \n      // Options for high accuracy\n      const options = {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: 5000\n      };\n\n      // Watch position continuously\n      this.watchId = navigator.geolocation.watchPosition(\n        this.handlePositionUpdate.bind(this),\n        this.handlePositionError.bind(this),\n        options\n      );\n\n      // Also set up a regular interval to ensure updates are sent\n      this.locationUpdateInterval = setInterval(() => {\n        if (this.lastPosition) {\n          this.sendLocationUpdate(this.lastPosition);\n        }\n      }, 10000); // Send update every 10 seconds as a fallback\n\n      return true;\n    } catch (error) {\n      console.error('Error starting location tracking:', error);\n      this.notifyListeners('error', error);\n      return false;\n    }\n  }\n\n  stopTracking() {\n    if (this.watchId !== null) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n    \n    if (this.locationUpdateInterval) {\n      clearInterval(this.locationUpdateInterval);\n      this.locationUpdateInterval = null;\n    }\n    \n    this.isTracking = false;\n  }\n\n  handlePositionUpdate(position) {\n    const coordinates = {\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    };\n    \n    this.lastPosition = coordinates;\n    this.notifyListeners('update', coordinates);\n    this.sendLocationUpdate(coordinates);\n  }\n\n  handlePositionError(error) {\n    console.error('Geolocation error:', error);\n    this.notifyListeners('error', error);\n  }\n\n  sendLocationUpdate(coordinates) {\n    return webSocketService.sendLocation(coordinates);\n  }\n\n  addListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  removeListener(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\n\n// Create a singleton instance\nconst locationService = new LocationService();\nexport default locationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}