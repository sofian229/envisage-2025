{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = {\n      message: [],\n      open: [],\n      close: [],\n      error: []\n    };\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n  }\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      console.log('WebSocket already connected');\n      return;\n    }\n    try {\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${window.location.hostname}:5000/ws?token=${token}`;\n      this.socket = new WebSocket(wsUrl);\n      this.socket.onopen = () => {\n        console.log('WebSocket connected');\n        this.isConnected = true;\n        this.reconnectAttempts = 0;\n        this.notifyListeners('open');\n      };\n      this.socket.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          this.notifyListeners('message', data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.socket.onclose = event => {\n        console.log('WebSocket disconnected', event.code, event.reason);\n        this.isConnected = false;\n        this.notifyListeners('close', event);\n\n        // Try to reconnect if not a normal closure\n        if (event.code !== 1000 && event.code !== 1001) {\n          this.attemptReconnect();\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.notifyListeners('error', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket:', error);\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Max reconnect attempts reached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n    console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\n    clearTimeout(this.reconnectTimeout);\n    this.reconnectTimeout = setTimeout(() => {\n      const token = localStorage.getItem('userToken');\n      if (token) {\n        this.connect(token);\n      }\n    }, delay);\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.isConnected = false;\n      clearTimeout(this.reconnectTimeout);\n    }\n  }\n  send(data) {\n    if (this.socket && this.isConnected) {\n      this.socket.send(JSON.stringify(data));\n      return true;\n    } else {\n      console.error('Cannot send message: WebSocket not connected');\n      return false;\n    }\n  }\n  addListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event].push(callback);\n    }\n  }\n  removeListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    }\n  }\n  notifyListeners(event, data) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in ${event} listener:`, error);\n        }\n      });\n    }\n  }\n}\n\n// Singleton instance\nconst webSocketService = new WebSocketService();\nexport default webSocketService;","map":{"version":3,"names":["WebSocketService","constructor","socket","listeners","message","open","close","error","isConnected","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","connect","token","console","log","wsProtocol","window","location","protocol","wsUrl","hostname","WebSocket","onopen","notifyListeners","onmessage","event","data","JSON","parse","onclose","code","reason","attemptReconnect","onerror","delay","Math","min","pow","clearTimeout","setTimeout","localStorage","getItem","disconnect","send","stringify","addListener","callback","push","removeListener","filter","cb","forEach","webSocketService"],"sources":["C:/Programming/Clubs/CIS/HackPrix/drift-guard-1pm/client/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = {\r\n      message: [],\r\n      open: [],\r\n      close: [],\r\n      error: []\r\n    };\r\n    this.isConnected = false;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectTimeout = null;\r\n  }\r\n\r\n  connect(token) {\r\n    if (this.socket && this.isConnected) {\r\n      console.log('WebSocket already connected');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      const wsUrl = `${wsProtocol}//${window.location.hostname}:5000/ws?token=${token}`;\r\n      \r\n      this.socket = new WebSocket(wsUrl);\r\n      \r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket connected');\r\n        this.isConnected = true;\r\n        this.reconnectAttempts = 0;\r\n        this.notifyListeners('open');\r\n      };\r\n      \r\n      this.socket.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          this.notifyListeners('message', data);\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n      \r\n      this.socket.onclose = (event) => {\r\n        console.log('WebSocket disconnected', event.code, event.reason);\r\n        this.isConnected = false;\r\n        this.notifyListeners('close', event);\r\n        \r\n        // Try to reconnect if not a normal closure\r\n        if (event.code !== 1000 && event.code !== 1001) {\r\n          this.attemptReconnect();\r\n        }\r\n      };\r\n      \r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.notifyListeners('error', error);\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  attemptReconnect() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('Max reconnect attempts reached');\r\n      return;\r\n    }\r\n    \r\n    this.reconnectAttempts++;\r\n    \r\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\r\n    console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\r\n    \r\n    clearTimeout(this.reconnectTimeout);\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      const token = localStorage.getItem('userToken');\r\n      if (token) {\r\n        this.connect(token);\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n      clearTimeout(this.reconnectTimeout);\r\n    }\r\n  }\r\n\r\n  send(data) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.send(JSON.stringify(data));\r\n      return true;\r\n    } else {\r\n      console.error('Cannot send message: WebSocket not connected');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  addListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].push(callback);\r\n    }\r\n  }\r\n\r\n  removeListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n\r\n  notifyListeners(event, data) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in ${event} listener:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nconst webSocketService = new WebSocketService();\r\nexport default webSocketService;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}