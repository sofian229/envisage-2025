{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = {\n      message: [],\n      open: [],\n      close: [],\n      error: []\n    };\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n    this.isConnecting = false;\n    this.messageQueue = [];\n  }\n  connect(token) {\n    // Prevent multiple connection attempts\n    if (this.isConnecting) {\n      console.log('WebSocket connection already in progress');\n      return;\n    }\n\n    // Check if already connected\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      console.log('WebSocket already connected');\n      this.processMessageQueue();\n      return;\n    }\n\n    // Clean up any existing socket\n    if (this.socket) {\n      this.socket.onclose = null; // Remove event handlers\n      this.socket.onerror = null;\n      this.socket.onmessage = null;\n      this.socket.onopen = null;\n      if (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING) {\n        this.socket.close();\n      }\n      this.socket = null;\n    }\n    this.isConnecting = true;\n    console.log('Connecting to WebSocket...');\n    try {\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${wsProtocol}//${window.location.hostname}:5000/ws?token=${token}`;\n      console.log(`Connecting to WebSocket at ${wsUrl}`);\n      this.socket = new WebSocket(wsUrl);\n      this.socket.onopen = () => {\n        console.log('WebSocket connected successfully');\n        this.reconnectAttempts = 0;\n        this.isConnecting = false;\n        this.notifyListeners('open');\n        this.processMessageQueue();\n      };\n      this.socket.onmessage = event => {\n        console.log('WebSocket message received:', event.data);\n        try {\n          const data = JSON.parse(event.data);\n          this.notifyListeners('message', data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.socket.onclose = event => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        this.isConnecting = false;\n        this.notifyListeners('close', event);\n\n        // Attempt to reconnect if not a normal closure\n        if (event.code !== 1000 && event.code !== 1001) {\n          this.attemptReconnect();\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.isConnecting = false;\n        this.notifyListeners('error', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      this.isConnecting = false;\n      this.attemptReconnect();\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.log('Max reconnect attempts reached');\n      return;\n    }\n    this.reconnectAttempts++;\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n    console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\n    clearTimeout(this.reconnectTimeout);\n    this.reconnectTimeout = setTimeout(() => {\n      const token = localStorage.getItem('userToken');\n      if (token) {\n        this.connect(token);\n      }\n    }, delay);\n  }\n  disconnect() {\n    clearTimeout(this.reconnectTimeout);\n    if (this.socket) {\n      // Remove event handlers to prevent reconnection attempts\n      this.socket.onclose = null;\n      this.socket.onerror = null;\n      if (this.socket.readyState === WebSocket.OPEN || this.socket.readyState === WebSocket.CONNECTING) {\n        this.socket.close();\n      }\n      this.socket = null;\n    }\n    this.isConnecting = false;\n    this.reconnectAttempts = 0;\n    this.messageQueue = [];\n  }\n  processMessageQueue() {\n    if (this.messageQueue.length > 0 && this.socket && this.socket.readyState === WebSocket.OPEN) {\n      console.log('Processing message queue...');\n      while (this.messageQueue.length > 0) {\n        const message = this.messageQueue.shift();\n        this.socket.send(JSON.stringify(message));\n      }\n      console.log('Message queue processed');\n    }\n  }\n  sendMessage(data) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      console.log('WebSocket not connected, adding message to queue');\n      this.messageQueue.push(data);\n\n      // Try to reconnect if not already connecting\n      if (!this.isConnecting) {\n        const token = localStorage.getItem('userToken');\n        if (token) {\n          this.connect(token);\n        }\n      }\n    }\n  }\n  addListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event].push(callback);\n    }\n  }\n  removeListener(event, callback) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    }\n  }\n  notifyListeners(event, data) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in ${event} listener:`, error);\n        }\n      });\n    }\n  }\n}\nconst webSocketService = new WebSocketService();\nexport default webSocketService;","map":{"version":3,"names":["WebSocketService","constructor","socket","listeners","message","open","close","error","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","isConnecting","messageQueue","connect","token","console","log","readyState","WebSocket","OPEN","processMessageQueue","onclose","onerror","onmessage","onopen","CONNECTING","wsProtocol","window","location","protocol","wsUrl","hostname","notifyListeners","event","data","JSON","parse","code","reason","attemptReconnect","delay","Math","min","pow","clearTimeout","setTimeout","localStorage","getItem","disconnect","length","shift","send","stringify","sendMessage","push","addListener","callback","removeListener","filter","cb","forEach","webSocketService"],"sources":["C:/Programming/Clubs/CIS/HackPrix/drift-guard-1pm/client/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = {\r\n      message: [],\r\n      open: [],\r\n      close: [],\r\n      error: []\r\n    };\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectTimeout = null;\r\n    this.isConnecting = false;\r\n    this.messageQueue = [];\r\n  }\r\n\r\n  connect(token) {\r\n    // Prevent multiple connection attempts\r\n    if (this.isConnecting) {\r\n      console.log('WebSocket connection already in progress');\r\n      return;\r\n    }\r\n    \r\n    // Check if already connected\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      console.log('WebSocket already connected');\r\n      this.processMessageQueue();\r\n      return;\r\n    }\r\n    \r\n    // Clean up any existing socket\r\n    if (this.socket) {\r\n      this.socket.onclose = null; // Remove event handlers\r\n      this.socket.onerror = null;\r\n      this.socket.onmessage = null;\r\n      this.socket.onopen = null;\r\n      \r\n      if (this.socket.readyState === WebSocket.OPEN || \r\n          this.socket.readyState === WebSocket.CONNECTING) {\r\n        this.socket.close();\r\n      }\r\n      this.socket = null;\r\n    }\r\n\r\n    this.isConnecting = true;\r\n    console.log('Connecting to WebSocket...');\r\n    \r\n    try {\r\n      const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n      const wsUrl = `${wsProtocol}//${window.location.hostname}:5000/ws?token=${token}`;\r\n      \r\n      console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n      this.socket = new WebSocket(wsUrl);\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket connected successfully');\r\n        this.reconnectAttempts = 0;\r\n        this.isConnecting = false;\r\n        this.notifyListeners('open');\r\n        this.processMessageQueue();\r\n      };\r\n\r\n      this.socket.onmessage = (event) => {\r\n        console.log('WebSocket message received:', event.data);\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          this.notifyListeners('message', data);\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.socket.onclose = (event) => {\r\n        console.log('WebSocket disconnected:', event.code, event.reason);\r\n        this.isConnecting = false;\r\n        this.notifyListeners('close', event);\r\n        \r\n        // Attempt to reconnect if not a normal closure\r\n        if (event.code !== 1000 && event.code !== 1001) {\r\n          this.attemptReconnect();\r\n        }\r\n      };\r\n\r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.isConnecting = false;\r\n        this.notifyListeners('error', error);\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating WebSocket connection:', error);\r\n      this.isConnecting = false;\r\n      this.attemptReconnect();\r\n    }\r\n  }\r\n\r\n  attemptReconnect() {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('Max reconnect attempts reached');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\r\n    \r\n    console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\r\n    \r\n    clearTimeout(this.reconnectTimeout);\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      const token = localStorage.getItem('userToken');\r\n      if (token) {\r\n        this.connect(token);\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  disconnect() {\r\n    clearTimeout(this.reconnectTimeout);\r\n    \r\n    if (this.socket) {\r\n      // Remove event handlers to prevent reconnection attempts\r\n      this.socket.onclose = null;\r\n      this.socket.onerror = null;\r\n      \r\n      if (this.socket.readyState === WebSocket.OPEN || \r\n          this.socket.readyState === WebSocket.CONNECTING) {\r\n        this.socket.close();\r\n      }\r\n      this.socket = null;\r\n    }\r\n    \r\n    this.isConnecting = false;\r\n    this.reconnectAttempts = 0;\r\n    this.messageQueue = [];\r\n  }\r\n\r\n  processMessageQueue() {\r\n    if (this.messageQueue.length > 0 && this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      console.log('Processing message queue...');\r\n      while (this.messageQueue.length > 0) {\r\n        const message = this.messageQueue.shift();\r\n        this.socket.send(JSON.stringify(message));\r\n      }\r\n      console.log('Message queue processed');\r\n    }\r\n  }\r\n\r\n  sendMessage(data) {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(data));\r\n    } else {\r\n      console.log('WebSocket not connected, adding message to queue');\r\n      this.messageQueue.push(data);\r\n      \r\n      // Try to reconnect if not already connecting\r\n      if (!this.isConnecting) {\r\n        const token = localStorage.getItem('userToken');\r\n        if (token) {\r\n          this.connect(token);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].push(callback);\r\n    }\r\n  }\r\n\r\n  removeListener(event, callback) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n\r\n  notifyListeners(event, data) {\r\n    if (this.listeners[event]) {\r\n      this.listeners[event].forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error(`Error in ${event} listener:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst webSocketService = new WebSocketService();\r\nexport default webSocketService;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}