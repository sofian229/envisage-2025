{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectTimeout = null;\n  }\n  connect(token) {\n    if (this.socket) {\n      this.disconnect();\n    }\n    this.socket = new WebSocket(`ws://localhost:5000/ws?token=${token}`);\n    this.socket.onopen = () => {\n      console.log('WebSocket connected');\n      this.reconnectAttempts = 0;\n      this.notifyListeners('connected', null);\n    };\n    this.socket.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket message received:', data);\n        this.notifyListeners('message', data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n      this.notifyListeners('error', error);\n    };\n    this.socket.onclose = () => {\n      console.log('WebSocket disconnected');\n      this.notifyListeners('disconnected', null);\n      this.attemptReconnect();\n    };\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n      console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = setTimeout(() => {\n        const token = localStorage.getItem('userToken');\n        if (token) {\n          this.connect(token);\n        }\n      }, delay);\n    } else {\n      console.error('Max reconnection attempts reached');\n      this.notifyListeners('reconnectFailed', null);\n    }\n  }\n  disconnect() {\n    clearTimeout(this.reconnectTimeout);\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n  }\n  sendMessage(data) {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n      return true;\n    }\n    return false;\n  }\n  sendLocation(coordinates) {\n    return this.sendMessage({\n      type: 'locationUpdate',\n      coordinates\n    });\n  }\n  addListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  removeListener(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  notifyListeners(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n}\n\n// Create a singleton instance\nconst webSocketService = new WebSocketService();","map":{"version":3,"names":["WebSocketService","constructor","socket","listeners","Map","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","connect","token","disconnect","WebSocket","onopen","console","log","notifyListeners","onmessage","event","data","JSON","parse","error","onerror","onclose","attemptReconnect","delay","Math","min","pow","clearTimeout","setTimeout","localStorage","getItem","close","sendMessage","readyState","OPEN","send","stringify","sendLocation","coordinates","type","addListener","callback","has","set","get","push","removeListener","callbacks","index","indexOf","splice","forEach","webSocketService"],"sources":["C:/Programming/Clubs/CIS/HackPrix/drift-guard-1pm/client/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = new Map();\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectTimeout = null;\r\n  }\r\n\r\n  connect(token) {\r\n    if (this.socket) {\r\n      this.disconnect();\r\n    }\r\n\r\n    this.socket = new WebSocket(`ws://localhost:5000/ws?token=${token}`);\r\n\r\n    this.socket.onopen = () => {\r\n      console.log('WebSocket connected');\r\n      this.reconnectAttempts = 0;\r\n      this.notifyListeners('connected', null);\r\n    };\r\n\r\n    this.socket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        console.log('WebSocket message received:', data);\r\n        this.notifyListeners('message', data);\r\n      } catch (error) {\r\n        console.error('Error parsing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.socket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n      this.notifyListeners('error', error);\r\n    };\r\n\r\n    this.socket.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      this.notifyListeners('disconnected', null);\r\n      this.attemptReconnect();\r\n    };\r\n  }\r\n\r\n  attemptReconnect() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\r\n      \r\n      console.log(`Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts})`);\r\n      \r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = setTimeout(() => {\r\n        const token = localStorage.getItem('userToken');\r\n        if (token) {\r\n          this.connect(token);\r\n        }\r\n      }, delay);\r\n    } else {\r\n      console.error('Max reconnection attempts reached');\r\n      this.notifyListeners('reconnectFailed', null);\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    clearTimeout(this.reconnectTimeout);\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(data) {\r\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\r\n      this.socket.send(JSON.stringify(data));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  sendLocation(coordinates) {\r\n    return this.sendMessage({\r\n      type: 'locationUpdate',\r\n      coordinates\r\n    });\r\n  }\r\n\r\n  addListener(event, callback) {\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, []);\r\n    }\r\n    this.listeners.get(event).push(callback);\r\n  }\r\n\r\n  removeListener(event, callback) {\r\n    if (this.listeners.has(event)) {\r\n      const callbacks = this.listeners.get(event);\r\n      const index = callbacks.indexOf(callback);\r\n      if (index !== -1) {\r\n        callbacks.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyListeners(event, data) {\r\n    if (this.listeners.has(event)) {\r\n      this.listeners.get(event).forEach(callback => callback(data));\r\n    }\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nconst webSocketService = new WebSocketService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}